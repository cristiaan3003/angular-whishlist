Elementos a instalar para un proyecto angular:

1) Instala NVM.

2)  Instala Node desde NVM, esto instala NPM.

3)  Instala typescript.

4)  Instala angular cli.


Comandos basicos para inicar una nueva app ANGULAR

1) CREAR UN NUEVO PROYECTO

Crear un nuevo poryecto:  
- ng new "nombre del proyecto"

Generar un nuevo componente:

- ng generate component "nombre del componente"

Empaquetar y lanzar

- ng serve

Info:

Cada modulo "componente" se define el el /src/app por un archivo *.ts,*.html,*.css
Angular desde index.html va al archivo *.ts que es donde se define el componente, en ese lugar encuentra
la definicion del "selector" que es el "tag personalizado" y especifica el path del template y de los estilos.
Por ultimo define el "COMPORTAMIENTO" (los componenetes tiene comportamiento encapsulado)

"app" -> Es el componenete raiz de toda aplicacion angular.


2) AGREGAR BOOTSTRAP

https://loiane.com/2017/08/how-to-add-bootstrap-to-an-angular-cli-project/#2-installing-bootstrap-from-npm

- npm install bootstrap --save

- npm install jquery --save

- npm install popper.js --save

Luego ir a "app/styles.css"  y colocar

@import '~bootstrap/dist/css/bootstrap.min.css';





3) para publicar la app-->

	ng build --prod --base-href /

y publicarlar con "now"Instalando now
Podemos instalar now utilizando npm:
npm instala -g now

**********************************************************************
**********************************************************************
**********************************************************************
NGRX DEVTOOL

https://github.com/ngrx/store-devtools

**********************************************************************
**********************************************************************
**********************************************************************



MAPAS MAP BOX - Mapas en angular:

npm install ngx-mapbox-gl mapbox-gl@0.49.0 --save

npm install ngx-mapbox-gl mapbox-gl --save


npm install @types/mapbox-gl@0.49.0 --save-dev

y agregar en "src/styles.css"

@import "~mapbox-gl/dist/mapbox-gl.css";
@import "~@mapbox/mapbox-gl-geocoder/lib/mapbox-gl-geocoder.css";

en "app.module.ts" agregar

import {NgxMapboxGLModule} from 'ngx-mapbox-gl';

imports: [...

NgxMapboxGLModule

...]

Usarlo en el  "html componente" con:

<mgl-map
    [style]="style"
    [zoom]="[2]"
    style="height: 50vh; width: 100vw;"
  >
  <mgl-marker
     [lngLat]="[-75.551012, 10.421185]"
   >
     <div
       onclick="alert('Hola')"
       class="marker"
     >
	   Hola mundo!
     </div>
   </mgl-marker>
  </mgl-map>

y en el Typescript del componente (con este metodo no es requerido el registro en MAPBOX - capa basica)  agregar este "style" en la 
clase del componenete

export class DestinoDetalleComponent implements OnInit {
  ...

  style = {
    sources: {
      world: {
        type: 'geojson',
        data: 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json'
      }
    },
    version: 8,
    layers: [{
      'id': 'countries',
      'type': 'fill',
      'source': 'world',
      'layout': {},
      'paint': {
        'fill-color': '#6F788A'
      }
    }]
  };

 ...


}



**********************************************************************
**********************************************************************
**********************************************************************

TESTs END-TO-END

cypress

npm install cypress --save-dev

package.json:

	"scripts":{
		"e2e":"cypress open"
	}

cmd line:
	ng serve
	npm run e2e
	


**********************************************************************
**********************************************************************
**********************************************************************

CONTINUOUS INTEGRATION  WITH "circle ci"

- web:

	registrarse en circleci y vincular el repositorio github, bitbucket, etc

- en el root del proyecto, agregar ".circleci/config.yml" con el setup para nuestro proyecto, en ese caso:

version: 2
jobs:
  build:
    working_directory: ~/myapp/angular-whishlist
    docker:
      - image: circleci/node:8-browsers
    steps:
      - checkout:
          path: ~/myapp
      - restore_cache:
          key: angular-whishlist-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run: npm install
      - save_cache:
          key: angular-whishlist-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run: npm run test -- --progress=false --watch=false --browsers=ChromeHeadlessCI --source-map=false








**********************************************************************
**********************************************************************
**********************************************************************



